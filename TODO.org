#+TITLE:     DuckDuckGo Elisp CheatSheet TODO
#+AUTHOR:    gum
#+EMAIL:     agumonkey@gmail.com

* TODO list sections

** TODO string
   | key         | val                                                            |
   |-------------+----------------------------------------------------------------|
   | syntax      | "a string"                                                     |
   | string-join | (string-join '("Hello" ", " "world") "!") ;-> "Hello!, !world" |

** DONE booleans
   | key   | val |
   |-------+-----|
   | true  | t   |
   | false | nil |

** DONE numbers
   | key     | val                                    |
   |---------+----------------------------------------|
   | integer | 0, -1                                  |
   | float   | 1.0, 1.1e-12                           |
   | <       | (< 2 1) ;-> nil                        |
   | >       | (> 2 1) ;-> t                          |
   | >=      | ...                                    |
   | <=      | ...                                    |
   | random  | (random 10) ;-> 8                      |
   | sin     | (sin 3.1415) ;-> 9.265358966049026e-05 |
   | cos     | (cos 3.1415) ;-> -0.9999999957076562   |
   | log     | ...                                    |
   | sqrt    | ...                                    |
   | expt    | ...                                    |

** DONE lists
   | key           | val                      |
   |---------------+--------------------------|
   | list          | (list 1 2 3 4)           |
   | quoted-syntax | '(1 2 3 4)               |
   | car           | (car '(1 2 3)) ;-> 1     |
   | cdr           | (cdr '(1 2 3)) ;-> (2 3) |
   | nth           | (nth 0 '(1 2 3)) ;-> 1   |

** DONE conditionals
   | key    | val                   |
   |--------+-----------------------|
   | if     | (if (cond) then else) |
   | when   | (when (cond) true)    |
   | unless | (unless (cond) false) |

** TODO repetition
   | key       | val                                             |
   |-----------+-------------------------------------------------|
   | mapcar    | (mapcar #'inc '(1 2 3)) ;-> (2 3 4)             |
   | mapconcat | (mapconcat #'upcase '("a" "b") ", ") ;-> "A, B" |
   | loop      | TODO                                            |
   | while     | (while (cond) body)                             |

** DONE vectors
   | key    | val                      |
   |--------+--------------------------|
   | syntax | [0 1 2 3]                |
   | aref   | (aref [0 1 2] 0) ;-> 0   |
   | aset   | (aset [0 1 2] 0 9) ;-> 9 |

** DONE hashmap
   | key             | val                                                                  |
   |-----------------+----------------------------------------------------------------------|
   | make-hash-table | (make-hash-table)                                                    |
   | gethash         | (let ((ht (make-hash-table))) (puthash 1 2 ht) (gethash 1 ht)) ;-> 2 |
   | puthash         | ...                                                                  |

** TODO buffers
   | key                     | val |
   |-------------------------+-----|
   | point-min               |     |
   | point-max               |     |
   | goto-char               |     |
   | backward                |     |
   | forward                 |     |
   | insert                  |     |
   | substring-no-properties |     |
   | with-buffer             |     |
   | save-excursion          |     |

** TODO functions, scopes and other
   | key                        | val                                              |
   |----------------------------+--------------------------------------------------|
   | defun                      | (defun <name> (<args>) <body>)                   |
   | lambda                     | (lambda (<args>) <body>)                         |
   | &rest                      | (defun <name> (<args> &rest <rest-args>) <body>) |
   | let (variables)            | (let ((x 1) (y 10)) (+ x y)) ;-> 11              |
   | progn (statement sequence) | (progn (message "wat") (* 6 7)) ;-> 42           |

** TODO macros
   | key        | val                                     |
   |------------+-----------------------------------------|
   | defmacro   | (defmacro <name> (<args>) <body>)       |
   | quasiquote | `(+ 1 2 ,(length ", means eval)" 4) |

** TODO regex
   | key                | val                                           |
   |--------------------+-----------------------------------------------|
   | looking-at         | (when (looking-at "# +") ...)                 |
   | re-search-forward  | (re-search-forward "def(un or var or macro)") |
   | re-search-backward | ...                                           |
   | string-match       | (string-match "[aoeiu]+" "foobaa")            |
   | match-data         |                                               |
   | match-beginning    |                                               |
   | match-end          |                                               |

** TODO region
   | key              | val                                      |
   |------------------+------------------------------------------|
   | region-active-p  | ...                                      |
   | region-beginning | ...                                      |
   | region-end       | ...                                      |
   | region-string    | (when (region-active-p) (region-string)) |

** DONE errors & exceptions
   | key   | val                                   |
   |-------+---------------------------------------|
   | error | (error "message")                     |
   | catch | (catch <tag> <body-maybe-with-throw>) |
   | throw | (throw <tag> <value>)                 |

** TODO io
   | key                   | val                              |
   |-----------------------+----------------------------------|
   | read                  | (read)                           |
   | print                 | (print "wat")                    |
   | pp                    | (pp '(1 2 3 4))                  |
   | with-output-to-string |                                  |
   | find-file             | (find-file "~/.emacs.d/init.el") |

** libraries

*** dash functional idioms (map, filter, reduce and a lot more)

*** f file library

*** s string library

*** ht hashtable library

* TODO ask #emacs et al about improvements

* TODO test
